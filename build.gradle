plugins {
    id 'java'
    id("io.papermc.paperweight.userdev") version "2.0.0-beta.16"
    id("xyz.jpenilla.run-paper") version "2.3.1" // Adds runServer task for testing
    id("com.gradleup.shadow") version "8.3.5"
}

group = 'org.smaskee'
version = '1.1-SNAPSHOT'

// Load local properties
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "dmulloy2-repo"
        url = "https://repo.dmulloy2.net/repository/public/"
    }
}

dependencies {
    compileOnly("com.comphenix.protocol:ProtocolLib:5.4.0")
    paperweight.paperDevBundle("1.21.4-R0.1-SNAPSHOT")
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release = 21
}

tasks {
    runServer {
        minecraftVersion("1.21.4")
    }

    // Copy the built jar to the plugins directory
    build {
        doLast {
            if (localProperties.containsKey('pluginsDir')) {
                def pluginsDir = localProperties.getProperty('pluginsDir')
                def jarFile = jar.archiveFile.get().asFile
                def targetFile = new File(pluginsDir, jarFile.name)

                // Create plugins directory if it doesn't exist
                new File(pluginsDir).mkdirs()

                // Copy the jar file
                jarFile.withInputStream { input ->
                    targetFile.withOutputStream { output ->
                        output << input
                    }
                }
                println "Copied ${jarFile.name} to ${targetFile.absolutePath}"
            }
        }
    }
}

processResources {
    def props = [version: version]
    inputs.properties(props)
    filteringCharset = 'UTF-8'
    filesMatching('plugin.yml') {
        expand(props)
    }
}

// Configure for Mojang mappings
tasks.withType(Jar).configureEach {
    manifest {
        attributes(
                'paperweight-mappings-namespace': 'mojang'
        )
    }
}