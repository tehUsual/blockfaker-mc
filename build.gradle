plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    id("io.papermc.paperweight.userdev") version "1.7.7"
}

group = 'org.smaskee'
version = '1.1-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "dmulloy2-repo"
        url = "https://repo.dmulloy2.net/repository/public/"
    }
}

dependencies {
    compileOnly("com.comphenix.protocol:ProtocolLib:5.4.0")
    paperweight.paperDevBundle("1.21.4-R0.1-SNAPSHOT")
}

// Load local properties if they exist
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localProperties.load(new FileInputStream(localPropertiesFile))
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21.4")
    }
}

tasks.assemble {
    dependsOn(tasks.reobfJar)
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

"processResources" {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

tasks.register('copyReobfJar', Copy) {
    dependsOn tasks.reobfJar
    from(tasks.reobfJar { it.outputJar })
    if (localProperties.containsKey('pluginsDir')) {
        into localProperties.getProperty('pluginsDir')
    } else {
        into 'build/libs' // fallback if local.properties doesn't exist
    }
    rename { String fileName -> "BlockFaker-${project.version}.jar" }
}

build.dependsOn tasks.copyReobfJar
